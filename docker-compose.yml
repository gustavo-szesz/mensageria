version: '3.8'

services:
  # Nginx with inline configuration
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    command: >
      /bin/sh -c "echo 'server { 
        listen 80; 
        
        # Root path
        location / { 
          return 200 \"Nginx is working!\"; 
          add_header Content-Type text/plain; 
        }
        
        # Health check endpoint
        location /health {
          proxy_pass http://backend:3000/api/health;
          proxy_http_version 1.1;
          proxy_set_header Host \\$$host;
          proxy_set_header X-Real-IP \\$$remote_addr;
        }
        
        # API endpoints
        location /api/ {
          proxy_pass http://backend:3000/api/;
          proxy_http_version 1.1;
          proxy_set_header Upgrade \\$$http_upgrade;
          proxy_set_header Connection \"upgrade\";
          proxy_set_header Host \\$$host;
          proxy_set_header X-Real-IP \\$$remote_addr;
        }
        
        # RabbitMQ management UI
        location /rabbitmq/ {
          proxy_pass http://rabbitmq:15672/;
          proxy_http_version 1.1;
          proxy_set_header Host \\$$host;
          proxy_set_header X-Real-IP \\$$remote_addr;
        }
      }' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin
    volumes:
      - ./backend:/app/backend
      - ./mensageria:/app/mensageria
      - /app/node_modules
    depends_on:
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  # Worker service
  worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    command: node backend/worker.js
    environment:
      - NODE_ENV=production
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin
    volumes:
      - ./backend:/app/backend
      - ./mensageria:/app/mensageria
      - /app/node_modules
    depends_on:
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  # RabbitMQ service
  rabbitmq:
    build:
      context: ./mensageria
      dockerfile: Dockerfile
    ports:
      - "5672:5672"  # AMQP protocol
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  rabbitmq-data: